{"version":3,"file":"ng-airound-protocol.js","sourceRoot":"","sources":["../../src/ng-airound-protocol.ts"],"names":[],"mappings":"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","sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport { isUndefined } from \"util\";\n\n@Injectable()\nexport class AiroundProtocolBuilder {    \n      SGU(user: {birthdate: string, gender: string, id: string, password: string, firstname: string, lastname: string}): string {\n        return new PROTO_FACTORY.PROTO_SGU(user.birthdate, user.gender, user.id, user.password, user.firstname, user.lastname).generate()\n      }\n}\n\ndeclare global {\n    interface String {\n      hexBitsLength(): string;\n      toHex(): string;\n    }\n  }\n  \n  String.prototype.hexBitsLength = function (this: string){\n    return (this.length*8).toString(16);\n  };\n  \n  String.prototype.toHex = function (this: string){\n    let result = '';\n    for(let i=0; i<this.length; i++){\n      result += this.charCodeAt(i).toString(16);\n    }\n  \n    return result;\n  };\n  \n  namespace PROTO_FACTORY {\n  \n    export class PROTO_SGU {\n      body = new PROTO_BODY.SGU();\n  \n      constructor(birthdate: string, gender: string, id: string, password: string, firstname: string, lastname: string){\n        this.body.birthdate = birthdate;\n        this.body.gender = gender;\n        this.body.tlv = new PROTO_BODY.SGU_TLV(id, password, firstname, lastname);\n      }\n  \n      generate(): string{\n        let header = new PROTO_HEADER({type: 1, length: this.body.value.length, eid: 302}).header\n        let body = this.body.value;\n  \n        return '{'+header+', '+body+'}'\n      }\n    }\n  \n    namespace PROTO_BODY {\n  \n      export class SGU {\n        readonly MAX_SIZE_BIRTHDATE = 32;\n  \n        private _birthdate_32: string;\n        private _gender_8: string;\n        private _tlv: SGU_TLV;\n  \n        set birthdate (date: string) {\n  \n          if(isUndefined( date )) throw 'Invalid input';\n  \n          let splitedDate = date.split( '/' );\n          let sequenceDate = '';\n          let numDate = -1;\n  \n          for( let fragment of splitedDate ) {\n            sequenceDate += fragment;\n          }\n  \n          try {\n            numDate = Number( sequenceDate );\n          } catch(e) {\n            throw e;\n          }\n  \n          if(numDate < 0 || numDate > 2 ** this.MAX_SIZE_BIRTHDATE) {\n            throw new RangeError();\n          }\n          this._birthdate_32 = sequenceDate;\n        }\n  \n        get birthdate () {\n          if(isUndefined( this._birthdate_32 )) throw 'Empty value';\n          return this._birthdate_32;\n        }\n  \n        set gender (gender: string) {\n          if(gender.toLowerCase() === 'male') {\n            this._gender_8 = 'm';\n          } else if(gender.toLowerCase() === 'female') {\n            this._gender_8 = 'f';\n          } else if(gender.toLowerCase() === 'other') {\n            this._gender_8 = 'o';\n          } else {\n            throw 'invalid input'\n          }\n        }\n  \n        get gender () {\n          if(isUndefined( this._gender_8 )) throw 'Empty value';\n          return this._gender_8;\n        }\n  \n        set tlv (tlv: SGU_TLV) {\n          this._tlv = tlv;\n        }\n  \n        get tlv () {\n          if(isUndefined( this._tlv )) throw 'Empty value';\n          return this._tlv;\n        }\n  \n        get value () {\n          return '\"body\": {' +\n            '\"birthdate\": ' + '\"'+this.birthdate +'\"'+\n            ', \"gender\": ' + '\"' + this.gender + '\"' +\n            ', \"tlv\": ' + '\"'+this.tlv.value +'\"'\n            + '}'\n        }\n      }\n  \n      export class SGU_TLV {\n        private readonly _id_type: string = '01';\n        private _id: string;\n        private _id_length: string;\n  \n        private readonly _password_type: string = '02';\n        private _password: string;\n        private _password_length: string;\n  \n        private readonly _firstname_type: string = '03';\n        private _firstname: string;\n        private _firstname_length: string;\n  \n        private readonly _lastname_type: string = '04';\n        private _lastname: string;\n        private _lastname_length: string;\n  \n        constructor (id: string, password: string, firstname: string, lastname: string) {\n          this.id = id;\n          this.password = password;\n          this.firstname = firstname;\n          this.lastname = lastname;\n        }\n  \n        set id (id: string) {\n          this._id_length = id.hexBitsLength();\n          this._id = id.toHex();\n        }\n  \n        set password (password: string) {\n          this._password_length = password.hexBitsLength();\n          this._password = password.toHex();\n        }\n  \n        set firstname (firstname: string) {\n          this._firstname_length = firstname.hexBitsLength();\n          this._firstname = firstname.toHex();\n        }\n  \n        set lastname (lastname: string) {\n          this._lastname_length = lastname.hexBitsLength();\n          this._lastname = lastname.toHex();\n        }\n  \n        get value () {\n          return this._id_type + this._id_length + this._id\n            + this._password_type + this._password_length + this._password\n            + this._firstname_type + this._firstname_length + this._firstname\n            + this._lastname_type + this._lastname_length + this._lastname;\n        }\n      }\n  \n    }\n  \n    class PROTO_HEADER {\n      field1 = '\"msg_type\"';\n      field2 = '\"msg_length\"';\n      field3 = '\"endpoint_id\"';\n  \n      delimeter = ' : ';\n      seperator = ', ';\n  \n      private _type_8: number = -1;\n      private _length_16: number = -1;\n      private _eid_24: number = -1;\n  \n      constructor (config: { type: number, length: number, eid: number }) {\n        this._type_8 = config.type;\n        this._length_16 = config.length;\n        this._eid_24 = config.eid;\n      }\n  \n      get header () {\n        try {\n          if(this._type_8 * this._length_16 * this._eid_24 < 0) throw new RangeError();\n  \n          let builtHeader = '\"header\": {';\n          builtHeader += this.field1 + this.delimeter + this._type_8 + this.seperator;\n          builtHeader += this.field2 + this.delimeter + this._length_16 + this.seperator;\n          builtHeader += this.field3 + this.delimeter + this._eid_24;\n          builtHeader += '}';\n  \n          return builtHeader\n  \n        } catch(e) {\n          if(e instanceof RangeError) {\n            console.log( 'Invalid value' );\n          } else {\n            console.log( 'Unexpected error' );\n          }\n          return '';\n        }\n      }\n    }\n  }\n  "]}